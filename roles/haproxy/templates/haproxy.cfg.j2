#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   https://www.haproxy.org/download/1.8/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

    # utilize system-wide crypto-policies
    ssl-default-bind-ciphers PROFILE=SYSTEM
    ssl-default-server-ciphers PROFILE=SYSTEM

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
frontend main
    bind *:5000
    acl url_static       path_beg       -i /static /images /javascript /stylesheets
    acl url_static       path_end       -i .jpg .gif .png .css .js

    use_backend static          if url_static
    default_backend             app

#---------------------------------------------------------------------
# static backend for serving up images, stylesheets and such
#---------------------------------------------------------------------
backend static
    balance     roundrobin
    server      static 127.0.0.1:4331 check

#---------------------------------------------------------------------
# round robin balancing between the various backends
#---------------------------------------------------------------------
backend app
    balance     roundrobin
    server  app1 127.0.0.1:5001 check
    server  app2 127.0.0.1:5002 check
    server  app3 127.0.0.1:5003 check
    server  app4 127.0.0.1:5004 check


#---------------------------------------------------------------------
# For OCP
#---------------------------------------------------------------------

frontend api-server
    bind *:6443
    mode tcp
    option tcplog
    default_backend api-server-6443

frontend machine-config-server
    bind *:22623
    mode tcp
    option tcplog
    default_backend machine-config-server-22623

frontend ingress-router-http
    bind *:80
    mode tcp
    option tcplog
    default_backend ingress-router-http-80

frontend ingress-router-https
    bind *:443
    mode tcp
    option tcplog
    default_backend ingress-router-https-443

frontend stats
    bind *:1936
    mode http
    option httplog
    maxconn 10
    stats enable
    stats hide-version
    stats refresh 30s
    stats show-node
    stats show-desc Stats for {{ cluster }} cluster
    stats auth admin:{{ cluster }}
    stats uri /stats

backend api-server-6443
    mode tcp
    option  httpchk GET /readyz HTTP/1.0
    option  log-health-checks
    balance roundrobin
    server  {{ bootstrap_node01 }} {{ bootstrap_node01 }}.{{ cluster }}.{{ domain }}:6443 verify none check check-ssl inter 1s fall 2 rise 3 backup
    server  {{ master_node01 }} {{ master_node01 }}.{{ cluster }}.{{ domain }}:6443 verify none check check-ssl inter 1s fall 2 rise 3
    server  {{ master_node02 }} {{ master_node02 }}.{{ cluster }}.{{ domain }}:6443 verify none check check-ssl inter 1s fall 2 rise 3
    server  {{ master_node03 }} {{ master_node03 }}.{{ cluster }}.{{ domain }}:6443 verify none check check-ssl inter 1s fall 2 rise 3

backend machine-config-server-22623
    mode tcp
    balance roundrobin
    server  {{ bootstrap_node01 }} {{ bootstrap_node01 }}.{{ cluster }}.{{ domain }}:22623 check inter 1s backup
    server  {{ master_node01 }} {{ master_node01 }}.{{ cluster }}.{{ domain }}:22623 check inter 1s
    server  {{ master_node02 }} {{ master_node02 }}.{{ cluster }}.{{ domain }}:22623 check inter 1s
    server  {{ master_node03 }} {{ master_node03 }}.{{ cluster }}.{{ domain }}:22623 check inter 1s

backend ingress-router-http-80
    mode tcp
    balance source
    server  {{ worker_node01 }} {{ worker_node01 }}.{{ cluster }}.{{ domain }}:80 check inter 1s backup
    server  {{ worker_node02 }} {{ worker_node02 }}.{{ cluster }}.{{ domain }}:80 check inter 1s backup
    server  {{ worker_node03 }} {{ worker_node03 }}.{{ cluster }}.{{ domain }}:80 check inter 1s backup

backend ingress-router-https-443
    mode tcp
    balance source
    server  {{ worker_node01 }} {{ worker_node01 }}.{{ cluster }}.{{ domain }}:443 check inter 1s backup
    server  {{ worker_node02 }} {{ worker_node02 }}.{{ cluster }}.{{ domain }}:443 check inter 1s backup
    server  {{ worker_node03 }} {{ worker_node03 }}.{{ cluster }}.{{ domain }}:443 check inter 1s backup
